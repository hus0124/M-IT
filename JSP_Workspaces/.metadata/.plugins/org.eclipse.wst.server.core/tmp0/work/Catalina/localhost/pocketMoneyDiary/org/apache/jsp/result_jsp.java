/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.50
 * Generated at: 2020-01-03 02:38:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public final class result_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("tr,td, th {border : 1px solid}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3>&emsp;&emsp;&emsp;&emsp;&emsp;현 상 태</h3>\r\n");
      out.write("\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t");
 String ID = "admin";
	   String PW = "1234";
	   
	   String userID = request.getParameter("id");
	   String userPW = request.getParameter("pw");
	   
	    int inMoney=0;
		int outMoney=0;
		int Money=0;
		
		String no=null;
		String date=null;
		String content=null;
		String in=null;
		String outM=null;
				
	   if(userID.equals(ID) && userPW.equals(PW)){
      out.write(" \r\n");
      out.write("\t\t   \r\n");
      out.write("\t\t   <table style=\"border:1px solid; border-collapse:collapse\">\r\n");
      out.write("\t\t     <tr><th>순번</th><th>일자</th><th>내용</th><th>수입</th><th>지출</th></tr>\r\n");
      out.write("\t\t     \r\n");
      out.write("\t\t   ");
 try{
				Class.forName("org.mariadb.jdbc.Driver");
				Connection conn=null;
				ResultSet rs = null;
				
				conn = DriverManager.getConnection(
						"jdbc:mariadb://localhost:3306/javadb",
						/* 나중에 쓸 때는 "jdbc:mariadb://localhost:3306/DB명" 을 입력한다. */
						"java",
						"java");
				
				System.out.println("데이터베이스에 정상적으로 연결됨.\n");
				
				Statement stmt=conn.createStatement();
				//rs = stmt.executeQuery("show databases");
				rs = stmt.executeQuery("SELECT SUM(`in`) AS \"총합\" FROM table_pocketmoneydiary");
				
				
				while(rs.next()){
					inMoney = rs.getInt(1);
					System.out.println("총수입 : " + inMoney);
				}
				
				ResultSet rs1 = stmt.executeQuery("SELECT SUM(`OUT`) AS \"총지출\" FROM table_pocketmoneydiary");
				
				while(rs1.next()){
					outMoney = rs1.getInt(1);
					System.out.println("총지출 : " + outMoney);
				}
				
				ResultSet rs2 = stmt.executeQuery("SELECT SUM(`in`)-SUM(`OUT`) AS \"총지출\" FROM table_pocketmoneydiary");
				
				while(rs2.next()){
					Money = rs2.getInt(1);
					System.out.println("현재 잔액 : " + Money);
				}
								
				ResultSet showTable = stmt.executeQuery("SELECT * FROM table_pocketmoneydiary ORDER BY NO DESC");
				
				while(showTable.next()) {
					no = showTable.getString("no");
					date = showTable.getString("date");
					content = showTable.getString("content");
					in = showTable.getString("in");
					outM = showTable.getString("out");
					System.out.println(no + date + content + in + outM); 
      out.write("\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(no);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(date);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(content);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(in);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(outM);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t");
 }
				
				showTable = stmt.executeQuery("SELECT * FROM table_pocketmoneydiary WHERE `OUT` = (SELECT MAX(`out`) FROM table_pocketmoneydiary)");
				
				while(showTable.next()){
					no = showTable.getString("no");
					date = showTable.getString("date");
					content = showTable.getString("content");
					//in = rs3.getString("in");
					outM = showTable.getString("out");
					System.out.printf("%s, %s, %s, %s", no,date,content,outM);
				}
				
			}catch(ClassNotFoundException cnfe){
				System.out.println("디비 드라이버 로딩 실패 : " + cnfe.toString());
			}catch(SQLException se){
				System.out.println("디비 접속 실패: " + se.toString());
			}catch(Exception e){
				System.out.println("에러 이유를 모르겠어오");
				e.printStackTrace();
			}   
	
      out.write("\r\n");
      out.write("\t</table><br>\t\t\r\n");
      out.write("\t총수입 : ");
      out.print(inMoney );
      out.write("<br>\r\n");
      out.write("\t총지출 : ");
      out.print(outMoney );
      out.write("<br>\r\n");
      out.write("\t현재잔액 : ");
      out.print(Money );
      out.write("<br>\r\n");
      out.write("\t최대지출이력 : ");
      out.print(no);
      out.write("&nbsp;");
      out.print(date);
      out.write("&nbsp;");
      out.print(content);
      out.write("&nbsp;");
      out.print(outM);
      out.write("<br><br>\r\n");
      out.write("\t\r\n");
      out.write("\t<a href = \"input.jsp\"><button>입력</button></a>\r\n");
      out.write("\t\r\n");
      out.write("\t<a href = \"delete.jsp\"><button>삭제</button></a>\r\n");
      out.write("\t\r\n");
      out.write("\t");
} else{
	
      out.write("\r\n");
      out.write("\t<fieldset style=\"width:30%; font-size:30px; text-align:center\">\r\n");
      out.write("\t로그인 정보를 확인해 주세요<br><br>\r\n");
      out.write("\t<a href = \"index.html\"><button style=\"width:180px;height:50px;font-size:20px;\">다시 로그인 하기</button>\r\n");
      out.write("\t</a></fieldset>\r\n");
      out.write("\t");
} 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
